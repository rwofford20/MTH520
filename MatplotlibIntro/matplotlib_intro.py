# matplotlib_intro.py"""Python Essentials: Intro to Matplotlib.Rachel WoffordMTH 520May 7, 2022"""import numpy as npfrom matplotlib import pyplot as plt# Problem 1def var_of_means(n):    """Construct a random matrix A with values drawn from the standard normal    distribution. Calculate the mean value of each row, then calculate the    variance of these means. Return the variance.    Parameters:        n (int): The number of rows and columns in the matrix A.    Returns:        (float) The variance of the means of each row.    """    # Create an nxn array of random standard normal variables    arr = np.random.normal(size=(n,n))    # Compute the mean of each row of the array    avg = arr.mean(axis=1)    # Return the variance of the means    return avg.var()def prob1():    """Create an array of the results of var_of_means() with inputs    n = 100, 200, ..., 1000. Plot and show the resulting array.    """    # Create an array of results of var_of_means with various inputs    results = []    for n in range(100, 1100, 100):        results.append(var_of_means(n))    # Plot an show the resulting array    plt.plot(results)    plt.show()    return# Problem 2def prob2():    """Plot the functions sin(x), cos(x), and arctan(x) on the domain    [-2pi, 2pi]. Make sure the domain is refined enough to produce a figure    with good resolution.    """    # Define the domain    x = np.linspace(-2*np.pi, 2*np.pi, 100)    # Plot sin(x)    plt.plot(x, np.sin(x))    # Plot cos(x)    plt.plot(x, np.cos(x))    # Plot arctan(x)    plt.plot(x, np.arctan(x))    # Display the plot    plt.show()    return# Problem 3def prob3():    """Plot the curve f(x) = 1/(x-1) on the domain [-2,6].        1. Split the domain so that the curve looks discontinuous.        2. Plot both curves with a thick, dashed magenta line.        3. Set the range of the x-axis to [-2,6] and the range of the           y-axis to [-6,6].    """    # Break up the domain to account for the discontinuity at x=1    x1 = np.linspace(-2,1,100)    x2 = np.linspace(1,6,100)    # Plot both curves with a dashed magenta line    plt.plot(x1, 1/(x1-1), 'm--', linewidth=4)    plt.plot(x2, 1/(x2-1), 'm--', linewidth=4)    # Change the ranges of the axes    plt.xlim(-2,6)    plt.ylim(-6,6)    # Display the plot    plt.show()    return# Problem 4def prob4():    """Plot the functions sin(x), sin(2x), 2sin(x), and 2sin(2x) on the    domain [0, 2pi].        1. Arrange the plots in a square grid of four subplots.        2. Set the limits of each subplot to [0, 2pi]x[-2, 2].        3. Give each subplot an appropriate title.        4. Give the overall figure a title.        5. Use the following line colors and styles.              sin(x): green solid line.             sin(2x): red dashed line.             2sin(x): blue dashed line.            2sin(2x): magenta dotted line.    """    # Define the domain    x = np.linspace(0, 2*np.pi, 200)    # Arrange the plots in a 2x2 grid of subplots    ax1 = plt.subplot(221)    ax1.plot(x, np.sin(x),'g-')    ax1.set_title('sin(x)')    ax2 = plt.subplot(222)    ax2.plot(x, np.sin(2*x),'r--')    ax2.set_title('sin(2x)')    ax3 = plt.subplot(223)    ax3.plot(x, 2*np.sin(x),'b--')    ax3.set_title('2sin(x)')    ax4 = plt.subplot(224)    ax4.plot(x, 2*np.sin(2*x),'m:')    ax4.set_title('2sin(2x)')    # Set the limits for all subplots    plt.axis([0, 2*np.pi, -2, 2])    # Give th figure a title    plt.suptitle('Variations of the sin function')    # Display the plot    plt.show()    return# Problem 5def prob5():    """Visualize the data in FARS.npy. Use np.load() to load the data, then    create a single figure with two subplots:        1. A scatter plot of longitudes against latitudes. Because of the            large number of data points, use black pixel markers (use "k,"            as the third argument to plt.plot()). Label both axes.        2. A histogram of the hours of the day, with one bin per hour.            Label and set the limits of the x-axis.    """    # Skip this problem    return# Problem 6def prob6():    """Plot the function f(x,y) = sin(x)sin(y)/xy on the domain    [-2pi, 2pi]x[-2pi, 2pi].        1. Create 2 subplots: one with a heat map of f, and one with a contour            map of f. Choose an appropriate number of level curves, or specify            the curves yourself.        2. Set the limits of each subplot to [-2pi, 2pi]x[-2pi, 2pi].        3. Choose a non-default color scheme.        4. Add a colorbar to each subplot.    """    # Define the domain    x = np.linspace(-2*np.pi, 2*np.pi, 200)    y = x.copy()    X, Y = np.meshgrid(x,y)    # Calculate g(x,y)-sin(x)sin(y)/xy    Z = (np.sin(X)*np.sin(Y))/(x*y)    # Plot the heat map of g    plt.subplot(121)    plt.pcolormesh(X,Y,Z, cmap="coolwarm")    plt.colorbar()    plt.xlim(-2*np.pi, 2*np.pi)    plt.ylim(-2*np.pi, 2*np.pi)    #plot the contour map of g    plt.subplot(122)    plt.contour(X,Y,Z, 200, cmap="viridis")    plt.colorbar()    plt.xlim(-2*np.pi, 2*np.pi)    plt.ylim(-2*np.pi, 2*np.pi)    plt.show()    return    if __name__=='__main__':    print(prob6())